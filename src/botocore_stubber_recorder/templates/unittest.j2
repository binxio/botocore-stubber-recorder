"""
{{ generator.name }} unit test.
This file is generated once, but never overwritten.
Implement the actual test in test_{{ generator.name }}
"""
import logging
import unittest
from {{ generator.package }}{{ generator.name }}.base import {{ generator.name_in_camel_case }}UnitTestBase


class {{ generator.name_in_camel_case }}UnitTest({{ generator.name_in_camel_case }}UnitTestBase):

    def test_{{ generator.name }}(self) -> None:
        """
        test {{generator.name }}. Stubbed clients will be returned for:{%
          for service in recorder.invoked_service_names %}
            - self.session.client("{{ service }}"){% endfor %}.
        """
        logging.warning("TODO: replace {{ generator.name_in_camel_case }}UnitTest.test_{{ generator.name }} with the actual test. This just tests the generated code.")
        {% for call in recorder.calls %}
        {%- set call_name = "call_{index:05d}_{operation}".format(index=loop.index, operation=call.operation) -%}
        from {{ generator.package }}{{ generator.name }} import {{ call_name }}
        response = self.session.client("{{call.service_name}}").{{ call.operation }}(**{{  call_name }}.request)
        self.assertEqual({{ call_name }}.response, response)

        {% endfor %}
    def setUp(self):
        super().setUp()

    def tearDown(self):
        super().tearDown()


if __name__ == '__main__':
    unittest.main()
